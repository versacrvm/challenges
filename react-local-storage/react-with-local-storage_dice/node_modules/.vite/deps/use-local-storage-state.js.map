{
  "version": 3,
  "sources": ["../../use-local-storage-state/src/useLocalStorageState.js", "../../use-local-storage-state/index.js"],
  "sourcesContent": ["import { useCallback, useEffect, useMemo, useRef, useState, useSyncExternalStore } from 'react';\n// in memory fallback used then `localStorage` throws an error\nexport const inMemoryData = new Map();\nexport default function useLocalStorageState(key, options) {\n    const [defaultValue] = useState(options === null || options === void 0 ? void 0 : options.defaultValue);\n    // SSR support\n    // - on the server, return a constant value\n    // - this makes the implementation simpler and smaller because the `localStorage` object is\n    //   `undefined` on the server\n    if (typeof window === 'undefined') {\n        return [\n            defaultValue,\n            () => { },\n            {\n                isPersistent: true,\n                removeItem: () => { },\n            },\n        ];\n    }\n    const serializer = options === null || options === void 0 ? void 0 : options.serializer;\n    // disabling ESLint because the above if statement can be executed only on the server. the value\n    // of `window` can't change between calls.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useBrowserLocalStorageState(key, defaultValue, options === null || options === void 0 ? void 0 : options.storageSync, serializer === null || serializer === void 0 ? void 0 : serializer.parse, serializer === null || serializer === void 0 ? void 0 : serializer.stringify);\n}\nfunction useBrowserLocalStorageState(key, defaultValue, storageSync = true, parse = parseJSON, stringify = JSON.stringify) {\n    // store default value in localStorage:\n    // - initial issue: https://github.com/astoilkov/use-local-storage-state/issues/26\n    //   issues that were caused by incorrect initial and secondary implementations:\n    //   - https://github.com/astoilkov/use-local-storage-state/issues/30\n    //   - https://github.com/astoilkov/use-local-storage-state/issues/33\n    if (!inMemoryData.has(key) &&\n        defaultValue !== undefined &&\n        goodTry(() => localStorage.getItem(key)) === null) {\n        // reasons for `localStorage` to throw an error:\n        // - maximum quota is exceeded\n        // - under Mobile Safari (since iOS 5) when the user enters private mode\n        //   `localStorage.setItem()` will throw\n        // - trying to access localStorage object when cookies are disabled in Safari throws\n        //   \"SecurityError: The operation is insecure.\"\n        goodTry(() => localStorage.setItem(key, stringify(defaultValue)));\n    }\n    // we keep the `parsed` value in a ref because `useSyncExternalStore` requires a cached version\n    const storageValue = useRef({\n        item: null,\n        parsed: defaultValue,\n    });\n    const value = useSyncExternalStore(useCallback((onStoreChange) => {\n        const onChange = (localKey) => {\n            if (key === localKey) {\n                onStoreChange();\n            }\n        };\n        callbacks.add(onChange);\n        return () => {\n            callbacks.delete(onChange);\n        };\n    }, [key]), \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    () => {\n        var _a;\n        const item = (_a = goodTry(() => localStorage.getItem(key))) !== null && _a !== void 0 ? _a : null;\n        if (inMemoryData.has(key)) {\n            storageValue.current = {\n                item,\n                parsed: inMemoryData.get(key),\n            };\n        }\n        else if (item !== storageValue.current.item) {\n            let parsed;\n            try {\n                parsed = item === null ? defaultValue : parse(item);\n            }\n            catch (_b) {\n                parsed = defaultValue;\n            }\n            storageValue.current = {\n                item,\n                parsed,\n            };\n        }\n        return storageValue.current.parsed;\n    }, \n    // istanbul ignore next\n    () => defaultValue);\n    const setState = useCallback((newValue) => {\n        const value = newValue instanceof Function ? newValue(storageValue.current.parsed) : newValue;\n        // reasons for `localStorage` to throw an error:\n        // - maximum quota is exceeded\n        // - under Mobile Safari (since iOS 5) when the user enters private mode\n        //   `localStorage.setItem()` will throw\n        // - trying to access `localStorage` object when cookies are disabled in Safari throws\n        //   \"SecurityError: The operation is insecure.\"\n        try {\n            localStorage.setItem(key, stringify(value));\n            inMemoryData.delete(key);\n        }\n        catch (_a) {\n            inMemoryData.set(key, value);\n        }\n        triggerCallbacks(key);\n    }, [key, stringify]);\n    // - syncs change across tabs, windows, iframes\n    // - the `storage` event is called only in all tabs, windows, iframe's except the one that\n    //   triggered the change\n    useEffect(() => {\n        if (!storageSync) {\n            return undefined;\n        }\n        const onStorage = (e) => {\n            if (e.storageArea === goodTry(() => localStorage) && e.key === key) {\n                triggerCallbacks(key);\n            }\n        };\n        window.addEventListener('storage', onStorage);\n        return () => window.removeEventListener('storage', onStorage);\n    }, [key, storageSync]);\n    return useMemo(() => [\n        value,\n        setState,\n        {\n            isPersistent: value === defaultValue || !inMemoryData.has(key),\n            removeItem() {\n                goodTry(() => localStorage.removeItem(key));\n                inMemoryData.delete(key);\n                triggerCallbacks(key);\n            },\n        },\n    ], [key, setState, value, defaultValue]);\n}\n// notifies all instances using the same `key` to update\nconst callbacks = new Set();\nfunction triggerCallbacks(key) {\n    for (const callback of [...callbacks]) {\n        callback(key);\n    }\n}\n// a wrapper for `JSON.parse()` that supports \"undefined\" value. otherwise,\n// `JSON.parse(JSON.stringify(undefined))` returns the string \"undefined\" not the value `undefined`\nfunction parseJSON(value) {\n    return value === 'undefined' ? undefined : JSON.parse(value);\n}\nfunction goodTry(tryFn) {\n    try {\n        return tryFn();\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n", "import useLocalStorageState from './src/useLocalStorageState.js';\nexport default useLocalStorageState;\n"],
  "mappings": ";;;;;;AAAA,mBAAwF;AAEjF,IAAM,eAAe,oBAAI,IAAI;AACrB,SAAR,qBAAsC,KAAK,SAAS;AACvD,QAAM,CAAC,YAAY,QAAI,uBAAS,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,YAAY;AAKtG,MAAI,OAAO,WAAW,aAAa;AAC/B,WAAO;AAAA,MACH;AAAA,MACA,MAAM;AAAA,MAAE;AAAA,MACR;AAAA,QACI,cAAc;AAAA,QACd,YAAY,MAAM;AAAA,QAAE;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AACA,QAAM,aAAa,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ;AAI7E,SAAO,4BAA4B,KAAK,cAAc,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,aAAa,eAAe,QAAQ,eAAe,SAAS,SAAS,WAAW,OAAO,eAAe,QAAQ,eAAe,SAAS,SAAS,WAAW,SAAS;AACvR;AACA,SAAS,4BAA4B,KAAK,cAAc,cAAc,MAAM,QAAQ,WAAW,YAAY,KAAK,WAAW;AAMvH,MAAI,CAAC,aAAa,IAAI,GAAG,KACrB,iBAAiB,UACjB,QAAQ,MAAM,aAAa,QAAQ,GAAG,CAAC,MAAM,MAAM;AAOnD,YAAQ,MAAM,aAAa,QAAQ,KAAK,UAAU,YAAY,CAAC,CAAC;AAAA,EACpE;AAEA,QAAM,mBAAe,qBAAO;AAAA,IACxB,MAAM;AAAA,IACN,QAAQ;AAAA,EACZ,CAAC;AACD,QAAM,YAAQ;AAAA,QAAqB,0BAAY,CAAC,kBAAkB;AAC9D,YAAM,WAAW,CAAC,aAAa;AAC3B,YAAI,QAAQ,UAAU;AAClB,wBAAc;AAAA,QAClB;AAAA,MACJ;AACA,gBAAU,IAAI,QAAQ;AACtB,aAAO,MAAM;AACT,kBAAU,OAAO,QAAQ;AAAA,MAC7B;AAAA,IACJ,GAAG,CAAC,GAAG,CAAC;AAAA;AAAA,IAER,MAAM;AACF,UAAI;AACJ,YAAM,QAAQ,KAAK,QAAQ,MAAM,aAAa,QAAQ,GAAG,CAAC,OAAO,QAAQ,OAAO,SAAS,KAAK;AAC9F,UAAI,aAAa,IAAI,GAAG,GAAG;AACvB,qBAAa,UAAU;AAAA,UACnB;AAAA,UACA,QAAQ,aAAa,IAAI,GAAG;AAAA,QAChC;AAAA,MACJ,WACS,SAAS,aAAa,QAAQ,MAAM;AACzC,YAAI;AACJ,YAAI;AACA,mBAAS,SAAS,OAAO,eAAe,MAAM,IAAI;AAAA,QACtD,SACO,IAAI;AACP,mBAAS;AAAA,QACb;AACA,qBAAa,UAAU;AAAA,UACnB;AAAA,UACA;AAAA,QACJ;AAAA,MACJ;AACA,aAAO,aAAa,QAAQ;AAAA,IAChC;AAAA;AAAA,IAEA,MAAM;AAAA,EAAY;AAClB,QAAM,eAAW,0BAAY,CAAC,aAAa;AACvC,UAAMA,SAAQ,oBAAoB,WAAW,SAAS,aAAa,QAAQ,MAAM,IAAI;AAOrF,QAAI;AACA,mBAAa,QAAQ,KAAK,UAAUA,MAAK,CAAC;AAC1C,mBAAa,OAAO,GAAG;AAAA,IAC3B,SACO,IAAI;AACP,mBAAa,IAAI,KAAKA,MAAK;AAAA,IAC/B;AACA,qBAAiB,GAAG;AAAA,EACxB,GAAG,CAAC,KAAK,SAAS,CAAC;AAInB,8BAAU,MAAM;AACZ,QAAI,CAAC,aAAa;AACd,aAAO;AAAA,IACX;AACA,UAAM,YAAY,CAAC,MAAM;AACrB,UAAI,EAAE,gBAAgB,QAAQ,MAAM,YAAY,KAAK,EAAE,QAAQ,KAAK;AAChE,yBAAiB,GAAG;AAAA,MACxB;AAAA,IACJ;AACA,WAAO,iBAAiB,WAAW,SAAS;AAC5C,WAAO,MAAM,OAAO,oBAAoB,WAAW,SAAS;AAAA,EAChE,GAAG,CAAC,KAAK,WAAW,CAAC;AACrB,aAAO,sBAAQ,MAAM;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,MACI,cAAc,UAAU,gBAAgB,CAAC,aAAa,IAAI,GAAG;AAAA,MAC7D,aAAa;AACT,gBAAQ,MAAM,aAAa,WAAW,GAAG,CAAC;AAC1C,qBAAa,OAAO,GAAG;AACvB,yBAAiB,GAAG;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ,GAAG,CAAC,KAAK,UAAU,OAAO,YAAY,CAAC;AAC3C;AAEA,IAAM,YAAY,oBAAI,IAAI;AAC1B,SAAS,iBAAiB,KAAK;AAC3B,aAAW,YAAY,CAAC,GAAG,SAAS,GAAG;AACnC,aAAS,GAAG;AAAA,EAChB;AACJ;AAGA,SAAS,UAAU,OAAO;AACtB,SAAO,UAAU,cAAc,SAAY,KAAK,MAAM,KAAK;AAC/D;AACA,SAAS,QAAQ,OAAO;AACpB,MAAI;AACA,WAAO,MAAM;AAAA,EACjB,SACO,IAAI;AACP,WAAO;AAAA,EACX;AACJ;;;ACpJA,IAAO,kCAAQ;",
  "names": ["value"]
}
